#!/usr/bin/env bash

<% require_relative 'helpers' %>
<%= Helpers.do_not_edit_message %>
<%= Helpers.bash_color_funcs %>

die ()
{
    echo -e "${color_red}[die]: ${1}${color_restore}"
    exit 1
}

runningOSX ()
{
    uname -a | grep "Darwin" > /dev/null
}

runningLinux ()
{
    uname -a | grep -i "Linux" > /dev/null
}

running32Bit ()
{
    [ "$(lshw -c cpu 2>/dev/null | grep width | awk '{print $2}')" = "32" ]
}

running64Bit ()
{
    [ "$(lshw -c cpu 2>/dev/null | grep width | awk '{print $2}')" = "64" ]
}

runningAmd64 ()
{
    [ "$(uname -m)" = 'x86_64' ]
}

running386 ()
{
    local arch
    arch="$(uname -m)"
    [ "$arch" = 'i686' ] || [ "$arch" = 'i386' ]
}

#runningArm ()
#{
#}
#
#runningArm64 ()
#{
#}

mac_link ()
{
    echo '<%= Helpers.url(Helpers.latest_release_name, 'darwin', 'amd64') %>'
}

linux_link ()
{
    echo '<%= Helpers.url(Helpers.latest_release_name, 'linux', 'amd64') %>'
}

downlink_link ()
{
    curl -o "${1}/<%= Helpers.zip_name %>" "${2}" || die "Error downloading <%= Helpers.zip_name %>.  Please check your connection and try again"
}

main ()
{
    dest_dir="${HOME}/bin"
    [ -n "$1" ] && dest_dir="$1"
    cyan "Creating destination directory '${dest_dir}' if it doesn't exist"
    mkdir -p "${dest_dir}" || die "Could not create directory '${dest_dir}'!"

    bin_name=''

    if runningLinux; then
        cyan 'You are running linux!  Downloading findref v<%= Helpers.latest_release %> for linux...'
        bin_name='findref'
        downlink_link "${dest_dir}" "$(linux_link)"
    elif runningOSX; then
        cyan 'You are running macOS!  Downloading findref v<%= Helpers.latest_release %> for macOS...'
        bin_name='findref'
        downlink_link "${dest_dir}" "$(mac_link)"
    else
        die "Platform not supported by this install script.\n\n\t${color_yellow}Pre-built binaries may be available for manual download.\n\tSee:  https://github.com/FreedomBen/findref#pre-built-binaries\n"
    fi

    cd "${dest_dir}" || die "Could not cd into ${dest_dir}"

    # If there's already a findref version, remove it
    cyan 'Cleaning out any old versions'
    rm -f "${bin_name}" || red "Error removing old version of ${bin_name}"

    cyan 'Unzipping v<%= Helpers.latest_release %>'
    unzip '<%= Helpers.zip_name %>' || die 'Error unzipping <%= Helpers.zip_name %>'

    cyan 'Cleaning up the zip file for v<%= Helpers.latest_release %>'
    rm -f '<%= Helpers.zip_name %>' || red "Error removing <%= Helpers.zip_name %>"

    cyan "Making ${bin_name} v<%= Helpers.latest_release %> executable"
    chmod +x "${bin_name}" || die "Unable to make $(pwd)/${bin_name}' executable!"

    cyan "All done!  If you can't run '${bin_name}' now, make sure that '${dest_dir}' is in your PATH"
}

main "$@"
